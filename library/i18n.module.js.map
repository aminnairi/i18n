{"version":3,"file":"i18n.module.js","sources":["../sources/i18n.ts"],"sourcesContent":["const join = (first: Readonly<string[]>, second: Readonly<string[]>): string => {\n    const firstLength: Readonly<number> = first.length;\n\n    let firstIndex: number = 0;\n    let secondIndex: number = 0;\n    let output: string = \"\";\n\n    while (firstIndex < firstLength) {\n        output += first[firstIndex++];\n\n        if (second[secondIndex]) {\n            output += second[secondIndex++];\n        }\n    }\n\n    return output;\n};\n\ninterface CreateI18nOptions {\n    locale: Readonly<string>;\n    translations: Readonly<Record<string, Record<string, string>>>;\n}\n\nexport const createI18n = ({locale, translations}: Readonly<CreateI18nOptions>) => (strings: Readonly<string[]>, ...values: Readonly<string[]>): string => {\n    const maybeLocaleTranslations: Record<string, string> | undefined = translations[strings.join(\"{}\")];\n\n    if (\"undefined\" !== typeof maybeLocaleTranslations) {\n        const maybeLocaleTranslation: string | undefined = maybeLocaleTranslations[locale];\n\n        if (\"undefined\" !== typeof maybeLocaleTranslation) {\n            const localeTranslation: Readonly<string[]> = maybeLocaleTranslation.split(\"{}\");\n\n            return join(localeTranslation, values);\n        }\n    }\n\n    return join(strings, values);\n};\n"],"names":["join","first","second","firstLength","length","firstIndex","secondIndex","output","createI18n","locale","translations","strings","values","maybeLocaleTranslations","maybeLocaleTranslation","localeTranslation","split"],"mappings":"AAAA,MAAMA,EAAO,CAACC,EAA2BC,KACrC,MAAMC,EAAgCF,EAAMG,OAE5C,IAAIC,EAAqB,EACrBC,EAAsB,EACtBC,EAAiB,GAErB,KAAOF,EAAaF,GAChBI,GAAUN,EAAMI,KAEZH,EAAOI,KACPC,GAAUL,EAAOI,MAIzB,OAAOC,GAQEC,EAAa,EAAEC,OAAAA,EAAQC,aAAAA,KAA+C,CAACC,KAAgCC,KAChH,MAAMC,EAA8DH,EAAaC,EAAQX,KAAK,OAE9F,QAAI,IAAuBa,EAAyB,CAChD,MAAMC,EAA6CD,EAAwBJ,GAE3E,QAAI,IAAuBK,EAAwB,CAC/C,MAAMC,EAAwCD,EAAuBE,MAAM,MAE3E,OAAOhB,EAAKe,EAAmBH,IAIvC,OAAOZ,EAAKW,EAASC"}